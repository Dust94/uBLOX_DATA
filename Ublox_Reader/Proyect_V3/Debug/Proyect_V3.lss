
Proyect_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800200  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000216  00800394  00800394  00000d0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f64  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc0  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b54  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  000046dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de0  00000000  00000000  0000510b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ab c0       	rjmp	.+342    	; 0x158 <__ctors_end>
   2:	00 00       	nop
   4:	c8 c0       	rjmp	.+400    	; 0x196 <__bad_interrupt>
   6:	00 00       	nop
   8:	c6 c0       	rjmp	.+396    	; 0x196 <__bad_interrupt>
   a:	00 00       	nop
   c:	c4 c0       	rjmp	.+392    	; 0x196 <__bad_interrupt>
   e:	00 00       	nop
  10:	c2 c0       	rjmp	.+388    	; 0x196 <__bad_interrupt>
  12:	00 00       	nop
  14:	c0 c0       	rjmp	.+384    	; 0x196 <__bad_interrupt>
  16:	00 00       	nop
  18:	be c0       	rjmp	.+380    	; 0x196 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bc c0       	rjmp	.+376    	; 0x196 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ba c0       	rjmp	.+372    	; 0x196 <__bad_interrupt>
  22:	00 00       	nop
  24:	b8 c0       	rjmp	.+368    	; 0x196 <__bad_interrupt>
  26:	00 00       	nop
  28:	b6 c0       	rjmp	.+364    	; 0x196 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b4 c0       	rjmp	.+360    	; 0x196 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b2 c0       	rjmp	.+356    	; 0x196 <__bad_interrupt>
  32:	00 00       	nop
  34:	b0 c0       	rjmp	.+352    	; 0x196 <__bad_interrupt>
  36:	00 00       	nop
  38:	ae c0       	rjmp	.+348    	; 0x196 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ac c0       	rjmp	.+344    	; 0x196 <__bad_interrupt>
  3e:	00 00       	nop
  40:	aa c0       	rjmp	.+340    	; 0x196 <__bad_interrupt>
  42:	00 00       	nop
  44:	a8 c0       	rjmp	.+336    	; 0x196 <__bad_interrupt>
  46:	00 00       	nop
  48:	a6 c0       	rjmp	.+332    	; 0x196 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a4 c0       	rjmp	.+328    	; 0x196 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a2 c0       	rjmp	.+324    	; 0x196 <__bad_interrupt>
  52:	00 00       	nop
  54:	a0 c0       	rjmp	.+320    	; 0x196 <__bad_interrupt>
  56:	00 00       	nop
  58:	9e c0       	rjmp	.+316    	; 0x196 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9c c0       	rjmp	.+312    	; 0x196 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9a c0       	rjmp	.+308    	; 0x196 <__bad_interrupt>
  62:	00 00       	nop
  64:	98 c0       	rjmp	.+304    	; 0x196 <__bad_interrupt>
  66:	00 00       	nop
  68:	96 c0       	rjmp	.+300    	; 0x196 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	94 c0       	rjmp	.+296    	; 0x196 <__bad_interrupt>
  6e:	00 00       	nop
  70:	92 c0       	rjmp	.+292    	; 0x196 <__bad_interrupt>
  72:	00 00       	nop
  74:	90 c0       	rjmp	.+288    	; 0x196 <__bad_interrupt>
  76:	00 00       	nop
  78:	8e c0       	rjmp	.+284    	; 0x196 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8c c0       	rjmp	.+280    	; 0x196 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8a c0       	rjmp	.+276    	; 0x196 <__bad_interrupt>
  82:	00 00       	nop
  84:	88 c0       	rjmp	.+272    	; 0x196 <__bad_interrupt>
  86:	00 00       	nop
  88:	86 c0       	rjmp	.+268    	; 0x196 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	84 c0       	rjmp	.+264    	; 0x196 <__bad_interrupt>
  8e:	00 00       	nop
  90:	82 c0       	rjmp	.+260    	; 0x196 <__bad_interrupt>
  92:	00 00       	nop
  94:	80 c0       	rjmp	.+256    	; 0x196 <__bad_interrupt>
  96:	00 00       	nop
  98:	7e c0       	rjmp	.+252    	; 0x196 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7c c0       	rjmp	.+248    	; 0x196 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7a c0       	rjmp	.+244    	; 0x196 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	78 c0       	rjmp	.+240    	; 0x196 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	76 c0       	rjmp	.+236    	; 0x196 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	74 c0       	rjmp	.+232    	; 0x196 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	72 c0       	rjmp	.+228    	; 0x196 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	70 c0       	rjmp	.+224    	; 0x196 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	6e c0       	rjmp	.+220    	; 0x196 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	6c c0       	rjmp	.+216    	; 0x196 <__bad_interrupt>
  be:	00 00       	nop
  c0:	6a c0       	rjmp	.+212    	; 0x196 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	68 c0       	rjmp	.+208    	; 0x196 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	66 c0       	rjmp	.+204    	; 0x196 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	64 c0       	rjmp	.+200    	; 0x196 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	62 c0       	rjmp	.+196    	; 0x196 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	60 c0       	rjmp	.+192    	; 0x196 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	5e c0       	rjmp	.+188    	; 0x196 <__bad_interrupt>
  da:	00 00       	nop
  dc:	5c c0       	rjmp	.+184    	; 0x196 <__bad_interrupt>
  de:	00 00       	nop
  e0:	5a c0       	rjmp	.+180    	; 0x196 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	eb 02       	muls	r30, r27
  e6:	f4 02       	muls	r31, r20
  e8:	fc 02       	muls	r31, r28
  ea:	0b 03       	fmul	r16, r19
  ec:	1a 03       	fmul	r17, r18
  ee:	2d 03       	fmul	r18, r21
  f0:	6a 03       	fmul	r22, r18
  f2:	8e 03       	fmulsu	r16, r22
  f4:	ac 03       	fmulsu	r18, r20
  f6:	28 04       	cpc	r2, r8
  f8:	41 04       	cpc	r4, r1
  fa:	50 04       	cpc	r5, r0
  fc:	b9 04       	cpc	r11, r9
  fe:	54 04       	cpc	r5, r4
 100:	b9 04       	cpc	r11, r9
 102:	b9 04       	cpc	r11, r9
 104:	b9 04       	cpc	r11, r9
 106:	b9 04       	cpc	r11, r9
 108:	b9 04       	cpc	r11, r9
 10a:	b9 04       	cpc	r11, r9
 10c:	b9 04       	cpc	r11, r9
 10e:	b9 04       	cpc	r11, r9
 110:	b9 04       	cpc	r11, r9
 112:	b9 04       	cpc	r11, r9
 114:	b9 04       	cpc	r11, r9
 116:	5c 04       	cpc	r5, r12
 118:	b9 04       	cpc	r11, r9
 11a:	b9 04       	cpc	r11, r9
 11c:	b9 04       	cpc	r11, r9
 11e:	b9 04       	cpc	r11, r9
 120:	b9 04       	cpc	r11, r9
 122:	b9 04       	cpc	r11, r9
 124:	b9 04       	cpc	r11, r9
 126:	b9 04       	cpc	r11, r9
 128:	b9 04       	cpc	r11, r9
 12a:	b9 04       	cpc	r11, r9
 12c:	b9 04       	cpc	r11, r9
 12e:	b9 04       	cpc	r11, r9
 130:	b9 04       	cpc	r11, r9
 132:	b9 04       	cpc	r11, r9
 134:	b9 04       	cpc	r11, r9
 136:	b9 04       	cpc	r11, r9
 138:	b9 04       	cpc	r11, r9
 13a:	b9 04       	cpc	r11, r9
 13c:	b9 04       	cpc	r11, r9
 13e:	b9 04       	cpc	r11, r9
 140:	b9 04       	cpc	r11, r9
 142:	b9 04       	cpc	r11, r9
 144:	b9 04       	cpc	r11, r9
 146:	b9 04       	cpc	r11, r9
 148:	b9 04       	cpc	r11, r9
 14a:	b9 04       	cpc	r11, r9
 14c:	b9 04       	cpc	r11, r9
 14e:	b9 04       	cpc	r11, r9
 150:	b9 04       	cpc	r11, r9
 152:	b9 04       	cpc	r11, r9
 154:	60 04       	cpc	r6, r0
 156:	6a 04       	cpc	r6, r10

00000158 <__ctors_end>:
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d1 e2       	ldi	r29, 0x21	; 33
 160:	de bf       	out	0x3e, r29	; 62
 162:	cd bf       	out	0x3d, r28	; 61
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0c bf       	out	0x3c, r16	; 60

00000168 <__do_copy_data>:
 168:	13 e0       	ldi	r17, 0x03	; 3
 16a:	a0 e0       	ldi	r26, 0x00	; 0
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	e2 ee       	ldi	r30, 0xE2	; 226
 170:	fa e0       	ldi	r31, 0x0A	; 10
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	0b bf       	out	0x3b, r16	; 59
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x14>
 178:	07 90       	elpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a4 39       	cpi	r26, 0x94	; 148
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0x10>

00000182 <__do_clear_bss>:
 182:	25 e0       	ldi	r18, 0x05	; 5
 184:	a4 e9       	ldi	r26, 0x94	; 148
 186:	b3 e0       	ldi	r27, 0x03	; 3
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	aa 3a       	cpi	r26, 0xAA	; 170
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	c3 d1       	rcall	.+902    	; 0x51a <main>
 194:	a4 c4       	rjmp	.+2376   	; 0xade <_exit>

00000196 <__bad_interrupt>:
 196:	34 cf       	rjmp	.-408    	; 0x0 <__vectors>

00000198 <Serial_begin>:
//	TxByte2((numero/1000)%10 + '0');
	TxByte2((numero/100) + '0');
	TxByte2((numero/100)%10 + '0');
	TxByte2((numero/10)%10 + '0');
	TxByte2(numero%10 + '0');
}
 198:	9c 01       	movw	r18, r24
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	74 e2       	ldi	r23, 0x24	; 36
 1a2:	84 ef       	ldi	r24, 0xF4	; 244
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	1e d4       	rcall	.+2108   	; 0x9e4 <__udivmodsi4>
 1a8:	da 01       	movw	r26, r20
 1aa:	c9 01       	movw	r24, r18
 1ac:	68 94       	set
 1ae:	12 f8       	bld	r1, 2
 1b0:	b6 95       	lsr	r27
 1b2:	a7 95       	ror	r26
 1b4:	97 95       	ror	r25
 1b6:	87 95       	ror	r24
 1b8:	16 94       	lsr	r1
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <Serial_begin+0x18>
 1bc:	9c 01       	movw	r18, r24
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	31 09       	sbc	r19, r1
 1c2:	30 93 c5 00 	sts	0x00C5, r19
 1c6:	20 93 c4 00 	sts	0x00C4, r18
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 c0 00 	sts	0x00C0, r24
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	80 93 c2 00 	sts	0x00C2, r24
 1d6:	88 e1       	ldi	r24, 0x18	; 24
 1d8:	80 93 c1 00 	sts	0x00C1, r24
 1dc:	08 95       	ret

000001de <Serial2_begin>:
 1de:	9c 01       	movw	r18, r24
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	74 e2       	ldi	r23, 0x24	; 36
 1e8:	84 ef       	ldi	r24, 0xF4	; 244
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fb d3       	rcall	.+2038   	; 0x9e4 <__udivmodsi4>
 1ee:	da 01       	movw	r26, r20
 1f0:	c9 01       	movw	r24, r18
 1f2:	68 94       	set
 1f4:	12 f8       	bld	r1, 2
 1f6:	b6 95       	lsr	r27
 1f8:	a7 95       	ror	r26
 1fa:	97 95       	ror	r25
 1fc:	87 95       	ror	r24
 1fe:	16 94       	lsr	r1
 200:	d1 f7       	brne	.-12     	; 0x1f6 <Serial2_begin+0x18>
 202:	9c 01       	movw	r18, r24
 204:	21 50       	subi	r18, 0x01	; 1
 206:	31 09       	sbc	r19, r1
 208:	30 93 d5 00 	sts	0x00D5, r19
 20c:	20 93 d4 00 	sts	0x00D4, r18
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 d0 00 	sts	0x00D0, r24
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 d2 00 	sts	0x00D2, r24
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	80 93 d1 00 	sts	0x00D1, r24
 222:	08 95       	ret

00000224 <Serial_write>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
 22a:	28 81       	ld	r18, Y
 22c:	22 23       	and	r18, r18
 22e:	89 f0       	breq	.+34     	; 0x252 <Serial_write+0x2e>
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	46 ec       	ldi	r20, 0xC6	; 198
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	90 81       	ld	r25, Z
 23c:	95 ff       	sbrs	r25, 5
 23e:	fd cf       	rjmp	.-6      	; 0x23a <Serial_write+0x16>
 240:	da 01       	movw	r26, r20
 242:	2c 93       	st	X, r18
 244:	3f 5f       	subi	r19, 0xFF	; 255
 246:	de 01       	movw	r26, r28
 248:	a3 0f       	add	r26, r19
 24a:	b1 1d       	adc	r27, r1
 24c:	2c 91       	ld	r18, X
 24e:	21 11       	cpse	r18, r1
 250:	f4 cf       	rjmp	.-24     	; 0x23a <Serial_write+0x16>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <Serial_print>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	bc 01       	movw	r22, r24
 25e:	9c 01       	movw	r18, r24
 260:	fc 01       	movw	r30, r24
 262:	84 91       	lpm	r24, Z
 264:	88 23       	and	r24, r24
 266:	99 f0       	breq	.+38     	; 0x28e <Serial_print+0x36>
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	a0 ec       	ldi	r26, 0xC0	; 192
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	c6 ec       	ldi	r28, 0xC6	; 198
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	9c 91       	ld	r25, X
 274:	95 ff       	sbrs	r25, 5
 276:	fd cf       	rjmp	.-6      	; 0x272 <Serial_print+0x1a>
 278:	f9 01       	movw	r30, r18
 27a:	24 91       	lpm	r18, Z
 27c:	28 83       	st	Y, r18
 27e:	4f 5f       	subi	r20, 0xFF	; 255
 280:	9b 01       	movw	r18, r22
 282:	24 0f       	add	r18, r20
 284:	31 1d       	adc	r19, r1
 286:	f9 01       	movw	r30, r18
 288:	94 91       	lpm	r25, Z
 28a:	91 11       	cpse	r25, r1
 28c:	f2 cf       	rjmp	.-28     	; 0x272 <Serial_print+0x1a>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <Serial2_print>:
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	bc 01       	movw	r22, r24
 29a:	9c 01       	movw	r18, r24
 29c:	fc 01       	movw	r30, r24
 29e:	84 91       	lpm	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	99 f0       	breq	.+38     	; 0x2ca <Serial2_print+0x36>
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	a0 ed       	ldi	r26, 0xD0	; 208
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	c6 ed       	ldi	r28, 0xD6	; 214
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	9c 91       	ld	r25, X
 2b0:	95 ff       	sbrs	r25, 5
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <Serial2_print+0x1a>
 2b4:	f9 01       	movw	r30, r18
 2b6:	24 91       	lpm	r18, Z
 2b8:	28 83       	st	Y, r18
 2ba:	4f 5f       	subi	r20, 0xFF	; 255
 2bc:	9b 01       	movw	r18, r22
 2be:	24 0f       	add	r18, r20
 2c0:	31 1d       	adc	r19, r1
 2c2:	f9 01       	movw	r30, r18
 2c4:	94 91       	lpm	r25, Z
 2c6:	91 11       	cpse	r25, r1
 2c8:	f2 cf       	rjmp	.-28     	; 0x2ae <Serial2_print+0x1a>
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <TxByte>:
 2d0:	e0 ec       	ldi	r30, 0xC0	; 192
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	90 81       	ld	r25, Z
 2d6:	95 ff       	sbrs	r25, 5
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <TxByte+0x4>
 2da:	80 93 c6 00 	sts	0x00C6, r24
 2de:	08 95       	ret

000002e0 <TxBCD>:
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	8c 01       	movw	r16, r24
 2ee:	60 e1       	ldi	r22, 0x10	; 16
 2f0:	77 e2       	ldi	r23, 0x27	; 39
 2f2:	65 d3       	rcall	.+1738   	; 0x9be <__divmodhi4>
 2f4:	f6 2e       	mov	r15, r22
 2f6:	e7 2e       	mov	r14, r23
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	86 0f       	add	r24, r22
 2fc:	e9 df       	rcall	.-46     	; 0x2d0 <TxByte>
 2fe:	ca e0       	ldi	r28, 0x0A	; 10
 300:	d0 e0       	ldi	r29, 0x00	; 0
 302:	8f 2d       	mov	r24, r15
 304:	9e 2d       	mov	r25, r14
 306:	be 01       	movw	r22, r28
 308:	5a d3       	rcall	.+1716   	; 0x9be <__divmodhi4>
 30a:	80 5d       	subi	r24, 0xD0	; 208
 30c:	e1 df       	rcall	.-62     	; 0x2d0 <TxByte>
 30e:	c8 01       	movw	r24, r16
 310:	68 ee       	ldi	r22, 0xE8	; 232
 312:	73 e0       	ldi	r23, 0x03	; 3
 314:	54 d3       	rcall	.+1704   	; 0x9be <__divmodhi4>
 316:	cb 01       	movw	r24, r22
 318:	be 01       	movw	r22, r28
 31a:	51 d3       	rcall	.+1698   	; 0x9be <__divmodhi4>
 31c:	80 5d       	subi	r24, 0xD0	; 208
 31e:	d8 df       	rcall	.-80     	; 0x2d0 <TxByte>
 320:	c8 01       	movw	r24, r16
 322:	64 e6       	ldi	r22, 0x64	; 100
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	4b d3       	rcall	.+1686   	; 0x9be <__divmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	be 01       	movw	r22, r28
 32c:	48 d3       	rcall	.+1680   	; 0x9be <__divmodhi4>
 32e:	80 5d       	subi	r24, 0xD0	; 208
 330:	cf df       	rcall	.-98     	; 0x2d0 <TxByte>
 332:	c8 01       	movw	r24, r16
 334:	be 01       	movw	r22, r28
 336:	43 d3       	rcall	.+1670   	; 0x9be <__divmodhi4>
 338:	18 2f       	mov	r17, r24
 33a:	cb 01       	movw	r24, r22
 33c:	be 01       	movw	r22, r28
 33e:	3f d3       	rcall	.+1662   	; 0x9be <__divmodhi4>
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	c6 df       	rcall	.-116    	; 0x2d0 <TxByte>
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	81 0f       	add	r24, r17
 348:	c3 df       	rcall	.-122    	; 0x2d0 <TxByte>
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	08 95       	ret

00000358 <TxByte2>:
 358:	e0 ed       	ldi	r30, 0xD0	; 208
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	90 81       	ld	r25, Z
 35e:	95 ff       	sbrs	r25, 5
 360:	fd cf       	rjmp	.-6      	; 0x35c <TxByte2+0x4>
 362:	80 93 d6 00 	sts	0x00D6, r24
 366:	08 95       	ret

00000368 <printLatLon>:




  // Convert 1e-7 value packed into long into decimal format
void printLatLon (long val) {
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2e 97       	sbiw	r28, 0x0e	; 14
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	ae 01       	movw	r20, r28
 386:	4f 5f       	subi	r20, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	6a d3       	rcall	.+1748   	; 0xa60 <__ltoa_ncheck>
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	7c 01       	movw	r14, r24
 392:	10 e0       	ldi	r17, 0x00	; 0
  //str.print(val, DEC);
  //char len = str.length();
  int len = sizeof(buffer) / sizeof(buffer[0]);
  char ii = 0;
  while (ii < (len - 7)) {
    Serial_write(buffer[ii++]);
 394:	1f 5f       	subi	r17, 0xFF	; 255
 396:	f7 01       	movw	r30, r14
 398:	81 91       	ld	r24, Z+
 39a:	7f 01       	movw	r14, r30
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	42 df       	rcall	.-380    	; 0x224 <Serial_write>
  ltoa(val,buffer,10);
  //str.print(val, DEC);
  //char len = str.length();
  int len = sizeof(buffer) / sizeof(buffer[0]);
  char ii = 0;
  while (ii < (len - 7)) {
 3a0:	17 30       	cpi	r17, 0x07	; 7
 3a2:	c1 f7       	brne	.-16     	; 0x394 <printLatLon+0x2c>
    Serial_write(buffer[ii++]);
  }
  Serial_write(".");
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	92 e0       	ldi	r25, 0x02	; 2
 3a8:	3d df       	rcall	.-390    	; 0x224 <Serial_write>
 3aa:	87 e0       	ldi	r24, 0x07	; 7
 3ac:	90 e0       	ldi	r25, 0x00	; 0
  while (ii < len) {
    Serial_write(buffer[ii++]);
 3ae:	1f 5f       	subi	r17, 0xFF	; 255
 3b0:	e1 e0       	ldi	r30, 0x01	; 1
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ec 0f       	add	r30, r28
 3b6:	fd 1f       	adc	r31, r29
 3b8:	e8 0f       	add	r30, r24
 3ba:	f9 1f       	adc	r31, r25
 3bc:	80 81       	ld	r24, Z
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	31 df       	rcall	.-414    	; 0x224 <Serial_write>
  char ii = 0;
  while (ii < (len - 7)) {
    Serial_write(buffer[ii++]);
  }
  Serial_write(".");
  while (ii < len) {
 3c2:	81 2f       	mov	r24, r17
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	8e 30       	cpi	r24, 0x0E	; 14
 3c8:	91 05       	cpc	r25, r1
 3ca:	8c f3       	brlt	.-30     	; 0x3ae <printLatLon+0x46>
    Serial_write(buffer[ii++]);
  }
}
 3cc:	2e 96       	adiw	r28, 0x0e	; 14
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	08 95       	ret

000003e4 <printHex>:

void printHex (unsigned char val) {
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
  if (val < 0x10)
 3e8:	80 31       	cpi	r24, 0x10	; 16
 3ea:	18 f4       	brcc	.+6      	; 0x3f2 <printHex+0xe>
  Serial_write("0");
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	19 df       	rcall	.-462    	; 0x224 <Serial_write>
  Serial_print(val);
 3f2:	8c 2f       	mov	r24, r28
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	30 df       	rcall	.-416    	; 0x258 <Serial_print>
}
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <sendCmd>:

void sendCmd (unsigned char len, uint8_t data[]) {
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	c8 2f       	mov	r28, r24
 40e:	7b 01       	movw	r14, r22
  TxByte2(0xB5);
 410:	85 eb       	ldi	r24, 0xB5	; 181
 412:	a2 df       	rcall	.-188    	; 0x358 <TxByte2>
  TxByte2(0x62);
 414:	82 e6       	ldi	r24, 0x62	; 98
 416:	a0 df       	rcall	.-192    	; 0x358 <TxByte2>
  unsigned char chk1 = 0, chk2 = 0;
  for (unsigned char ii = 0; ii < len; ii++) {
 418:	cc 23       	and	r28, r28
 41a:	b1 f0       	breq	.+44     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 41c:	87 01       	movw	r16, r14
 41e:	c1 50       	subi	r28, 0x01	; 1
 420:	cc 2e       	mov	r12, r28
 422:	d1 2c       	mov	r13, r1
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	c8 1a       	sub	r12, r24
 428:	d8 0a       	sbc	r13, r24
 42a:	ce 0c       	add	r12, r14
 42c:	df 1c       	adc	r13, r15
 42e:	f1 2c       	mov	r15, r1
 430:	c0 e0       	ldi	r28, 0x00	; 0
    unsigned char cc = data[ii];
 432:	f8 01       	movw	r30, r16
 434:	d1 91       	ld	r29, Z+
 436:	8f 01       	movw	r16, r30
    //TxByte(cc);
	TxByte2(cc);
 438:	8d 2f       	mov	r24, r29
 43a:	8e df       	rcall	.-228    	; 0x358 <TxByte2>
    chk1 += cc;
 43c:	cd 0f       	add	r28, r29
    chk2 += chk1;
 43e:	fc 0e       	add	r15, r28

void sendCmd (unsigned char len, uint8_t data[]) {
  TxByte2(0xB5);
  TxByte2(0x62);
  unsigned char chk1 = 0, chk2 = 0;
  for (unsigned char ii = 0; ii < len; ii++) {
 440:	0c 15       	cp	r16, r12
 442:	1d 05       	cpc	r17, r13
 444:	b1 f7       	brne	.-20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
}

void sendCmd (unsigned char len, uint8_t data[]) {
  TxByte2(0xB5);
  TxByte2(0x62);
  unsigned char chk1 = 0, chk2 = 0;
 448:	f1 2c       	mov	r15, r1
 44a:	c0 e0       	ldi	r28, 0x00	; 0
    //TxByte(cc);
	TxByte2(cc);
    chk1 += cc;
    chk2 += chk1;
  }
  TxByte2(chk1);
 44c:	8c 2f       	mov	r24, r28
 44e:	84 df       	rcall	.-248    	; 0x358 <TxByte2>
  TxByte2(chk2);
 450:	8f 2d       	mov	r24, r15
 452:	82 df       	rcall	.-252    	; 0x358 <TxByte2>
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	08 95       	ret

00000466 <enableMsg>:
 *
 * Note: RX pad on 3DR Module is output, TX is input
 */
	
	
void enableMsg (unsigned char id, uint8_t enable) {
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	27 97       	sbiw	r28, 0x07	; 7
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61

  //               MSG   NAV   < length >  NAV
  if (enable == 1){
 47a:	61 30       	cpi	r22, 0x01	; 1
 47c:	a9 f4       	brne	.+42     	; 0x4a8 <enableMsg+0x42>
  uint8_t cmdBuf[] = {0x06, 0x01, 0x03, 0x00, 0x01, id, 0x1};
 47e:	96 e0       	ldi	r25, 0x06	; 6
 480:	99 83       	std	Y+1, r25	; 0x01
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	23 e0       	ldi	r18, 0x03	; 3
 488:	2b 83       	std	Y+3, r18	; 0x03
 48a:	1c 82       	std	Y+4, r1	; 0x04
 48c:	9d 83       	std	Y+5, r25	; 0x05
 48e:	8e 83       	std	Y+6, r24	; 0x06
 490:	9f 83       	std	Y+7, r25	; 0x07
  len_cmdBuf = sizeof(cmdBuf) / sizeof(cmdBuf[0]);
 492:	87 e0       	ldi	r24, 0x07	; 7
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	90 93 a2 03 	sts	0x03A2, r25
 49a:	80 93 a1 03 	sts	0x03A1, r24
  sendCmd(len_cmdBuf, cmdBuf);
 49e:	be 01       	movw	r22, r28
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	ab df       	rcall	.-170    	; 0x3fc <sendCmd>
 4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <enableMsg+0x6a>
  
  }
  else{ 
  uint8_t cmdBuf[] = {0x06, 0x01, 0x03, 0x00, 0x01, id, 0x0};
 4a8:	96 e0       	ldi	r25, 0x06	; 6
 4aa:	99 83       	std	Y+1, r25	; 0x01
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	9a 83       	std	Y+2, r25	; 0x02
 4b0:	23 e0       	ldi	r18, 0x03	; 3
 4b2:	2b 83       	std	Y+3, r18	; 0x03
 4b4:	1c 82       	std	Y+4, r1	; 0x04
 4b6:	9d 83       	std	Y+5, r25	; 0x05
 4b8:	8e 83       	std	Y+6, r24	; 0x06
 4ba:	1f 82       	std	Y+7, r1	; 0x07
  len_cmdBuf = sizeof(cmdBuf) / sizeof(cmdBuf[0]);
 4bc:	87 e0       	ldi	r24, 0x07	; 7
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 a2 03 	sts	0x03A2, r25
 4c4:	80 93 a1 03 	sts	0x03A1, r24
  sendCmd(len_cmdBuf, cmdBuf);
 4c8:	be 01       	movw	r22, r28
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	96 df       	rcall	.-212    	; 0x3fc <sendCmd>
  }
  
}
 4d0:	27 96       	adiw	r28, 0x07	; 7
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <setup>:

void setup() {
	
  Serial_begin(9600);
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	95 e2       	ldi	r25, 0x25	; 37
 4e6:	58 de       	rcall	.-848    	; 0x198 <Serial_begin>
  Serial2_begin(38400);	
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	96 e9       	ldi	r25, 0x96	; 150
 4ec:	78 de       	rcall	.-784    	; 0x1de <Serial2_begin>
    while(!(UCSR2A&(1<<RXC2)));
	lstate = state = 0;
  }

  // Modify these to control which messages are sent from module
  enableMsg(POSLLH_MSG, TRUE);    // Enable position messages
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	b9 df       	rcall	.-142    	; 0x466 <enableMsg>
  enableMsg(SBAS_MSG, FALSE);      // Enable SBAS messages
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	82 e3       	ldi	r24, 0x32	; 50
 4f8:	b6 df       	rcall	.-148    	; 0x466 <enableMsg>
  enableMsg(VELNED_MSG, FALSE);    // Enable velocity messages
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	82 e1       	ldi	r24, 0x12	; 18
 4fe:	b3 df       	rcall	.-154    	; 0x466 <enableMsg>
  enableMsg(STATUS_MSG, FALSE);    // Enable status messages
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	b0 df       	rcall	.-160    	; 0x466 <enableMsg>
  enableMsg(SOL_MSG, TRUE);       // Enable soluton messages
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	86 e0       	ldi	r24, 0x06	; 6
 50a:	ad df       	rcall	.-166    	; 0x466 <enableMsg>
  enableMsg(DOP_MSG, FALSE);       // Enable DOP messages
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	84 e0       	ldi	r24, 0x04	; 4
 510:	aa df       	rcall	.-172    	; 0x466 <enableMsg>
  enableMsg(DGPS_MSG, FALSE);     // Disable DGPS messages
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	81 e3       	ldi	r24, 0x31	; 49
 516:	a7 cf       	rjmp	.-178    	; 0x466 <enableMsg>
 518:	08 95       	ret

0000051a <main>:

int main(void)
{
	unsigned char cc;

	DDRB = (1<<PB7);
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	84 b9       	out	0x04, r24	; 4
	cbi(PORTB,PB7) ;
 51e:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	83 ed       	ldi	r24, 0xD3	; 211
 524:	90 e3       	ldi	r25, 0x30	; 48
 526:	21 50       	subi	r18, 0x01	; 1
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <main+0xc>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0x16>
 530:	00 00       	nop
	_delay_ms(1000);
	sbi(PORTB,PB7);
 532:	2f 9a       	sbi	0x05, 7	; 5
 534:	ef ef       	ldi	r30, 0xFF	; 255
 536:	f3 ed       	ldi	r31, 0xD3	; 211
 538:	20 e3       	ldi	r18, 0x30	; 48
 53a:	e1 50       	subi	r30, 0x01	; 1
 53c:	f0 40       	sbci	r31, 0x00	; 0
 53e:	20 40       	sbci	r18, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <main+0x20>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x2a>
 544:	00 00       	nop
	_delay_ms(1000);
	cbi(PORTB,PB7) ;
 546:	2f 98       	cbi	0x05, 7	; 5
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	93 ed       	ldi	r25, 0xD3	; 211
 54c:	e0 e3       	ldi	r30, 0x30	; 48
 54e:	81 50       	subi	r24, 0x01	; 1
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e0 40       	sbci	r30, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <main+0x34>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x3e>
 558:	00 00       	nop
	_delay_ms(1000); 
	/* Replace with your application code */	
	setup();
 55a:	c3 df       	rcall	.-122    	; 0x4e2 <setup>
	Serial_write(" acaba DE TERMINAR EL SETUP\r\n");
 55c:	84 e0       	ldi	r24, 0x04	; 4
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	61 de       	rcall	.-830    	; 0x224 <Serial_write>

	state = 0;
 562:	10 92 9f 03 	sts	0x039F, r1

	while(1) {
		
		
		//Serial_write("00\r\n");
		if(!(UCSR2A && (1<<RXC2))==0); {
 566:	0f 2e       	mov	r0, r31
 568:	f0 ed       	ldi	r31, 0xD0	; 208
 56a:	ef 2e       	mov	r14, r31
 56c:	f1 2c       	mov	r15, r1
 56e:	f0 2d       	mov	r31, r0
			cc = UDR2;
 570:	06 ed       	ldi	r16, 0xD6	; 214
 572:	10 e0       	ldi	r17, 0x00	; 0
				if ((ck1 == chk1)  &&  (ck2 == chk2))
				{	checkOk  = 1;	}

				else {checkOk = 0;}

				checkOk = 1;
 574:	aa 24       	eor	r10, r10
 576:	a3 94       	inc	r10
 578:	b1 2c       	mov	r11, r1
				code= 0x02;
 57a:	d2 e0       	ldi	r29, 0x02	; 2
				*/
					switch (code) {		
												
						case 0x01:      // NAV-
						// Add blank line between time groups
						if (lastTime != ULONG(0)) {
 57c:	0f 2e       	mov	r0, r31
 57e:	f5 ea       	ldi	r31, 0xA5	; 165
 580:	8f 2e       	mov	r8, r31
 582:	f3 e0       	ldi	r31, 0x03	; 3
 584:	9f 2e       	mov	r9, r31
 586:	f0 2d       	mov	r31, r0
				ck1 += cc;
				ck2 += ck1;
				
				if (idx >= length) {
					//Serial_write("ENTRO AL CASE 6_IF \r\n");
					state++;
 588:	0f 2e       	mov	r0, r31
 58a:	f7 e0       	ldi	r31, 0x07	; 7
 58c:	4f 2e       	mov	r4, r31
 58e:	f0 2d       	mov	r31, r0

				case 4:    // wait for length byte 1
				length = cc;
				ck1 += cc;
				ck2 += ck1;
				state++;
 590:	0f 2e       	mov	r0, r31
 592:	f5 e0       	ldi	r31, 0x05	; 5
 594:	5f 2e       	mov	r5, r31
 596:	f0 2d       	mov	r31, r0

				case 3:    // wait for Id
				id = cc;
				ck1 += cc;
				ck2 += ck1;
				state++;
 598:	68 94       	set
 59a:	66 24       	eor	r6, r6
 59c:	62 f8       	bld	r6, 2

				case 2:    // wait for class code
				code = cc;
				ck1 += cc;
				ck2 += ck1;
				state++;
 59e:	0f 2e       	mov	r0, r31
 5a0:	f3 e0       	ldi	r31, 0x03	; 3
 5a2:	7f 2e       	mov	r7, r31
 5a4:	f0 2d       	mov	r31, r0
			switch (state) {
				case 0:    // wait for sync 1 (0xB5)
				ck1 = ck2 = 0;
				//Serial_write("ENTRO AL CASE 0 \r\n");
				if (cc == 0xB5) //0xB5
				state++;
 5a6:	33 24       	eor	r3, r3
 5a8:	33 94       	inc	r3

	while(1) {
		
		
		//Serial_write("00\r\n");
		if(!(UCSR2A && (1<<RXC2))==0); {
 5aa:	f7 01       	movw	r30, r14
 5ac:	80 81       	ld	r24, Z
			cc = UDR2;
 5ae:	f8 01       	movw	r30, r16
 5b0:	c0 81       	ld	r28, Z
			//while ((UCSR0A & (1<<UDRE0)) == 0);
			//Serial_write("SE HA ASIGNADO EL UDR2 \r\n");
			//TxBCD(cc);
			//Serial_write("A\r\n");
			TxBCD(state);
 5b2:	80 91 9f 03 	lds	r24, 0x039F
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	93 de       	rcall	.-730    	; 0x2e0 <TxBCD>
			Serial_write("\r\n");
 5ba:	83 e5       	ldi	r24, 0x53	; 83
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	32 de       	rcall	.-924    	; 0x224 <Serial_write>

			switch (state) {
 5c0:	e0 91 9f 03 	lds	r30, 0x039F
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	e9 30       	cpi	r30, 0x09	; 9
 5c8:	f1 05       	cpc	r31, r1
 5ca:	78 f7       	brcc	.-34     	; 0x5aa <main+0x90>
 5cc:	88 27       	eor	r24, r24
 5ce:	ee 58       	subi	r30, 0x8E	; 142
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	8f 4f       	sbci	r24, 0xFF	; 255
 5d4:	29 c2       	rjmp	.+1106   	; 0xa28 <__tablejump2__>
				case 0:    // wait for sync 1 (0xB5)
				ck1 = ck2 = 0;
 5d6:	10 92 a9 05 	sts	0x05A9, r1
 5da:	10 92 a8 05 	sts	0x05A8, r1
				//Serial_write("ENTRO AL CASE 0 \r\n");
				if (cc == 0xB5) //0xB5
 5de:	c5 3b       	cpi	r28, 0xB5	; 181
 5e0:	21 f7       	brne	.-56     	; 0x5aa <main+0x90>
				state++;
 5e2:	30 92 9f 03 	sts	0x039F, r3
 5e6:	e1 cf       	rjmp	.-62     	; 0x5aa <main+0x90>
				break;
				
				case 1:    // wait for sync 2 (0x62)
				if (cc == 0x62) state++; //0x62
 5e8:	c2 36       	cpi	r28, 0x62	; 98
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <main+0xd8>
 5ec:	d0 93 9f 03 	sts	0x039F, r29
 5f0:	dc cf       	rjmp	.-72     	; 0x5aa <main+0x90>
				else state = 0;
 5f2:	10 92 9f 03 	sts	0x039F, r1
 5f6:	d9 cf       	rjmp	.-78     	; 0x5aa <main+0x90>
				//Serial_write("ENTRO AL CASE 1 \r\n");
				break;

				case 2:    // wait for class code
				code = cc;
 5f8:	c0 93 a7 05 	sts	0x05A7, r28
				ck1 += cc;
 5fc:	80 91 a8 05 	lds	r24, 0x05A8
 600:	c8 0f       	add	r28, r24
 602:	c0 93 a8 05 	sts	0x05A8, r28
				ck2 += ck1;
 606:	80 91 a9 05 	lds	r24, 0x05A9
 60a:	c8 0f       	add	r28, r24
 60c:	c0 93 a9 05 	sts	0x05A9, r28
				state++;
 610:	70 92 9f 03 	sts	0x039F, r7
				//Serial_write("ENTRO AL CASE 2 \r\n");
				break;
 614:	ca cf       	rjmp	.-108    	; 0x5aa <main+0x90>

				case 3:    // wait for Id
				id = cc;
 616:	c0 93 a0 03 	sts	0x03A0, r28
				ck1 += cc;
 61a:	80 91 a8 05 	lds	r24, 0x05A8
 61e:	c8 0f       	add	r28, r24
 620:	c0 93 a8 05 	sts	0x05A8, r28
				ck2 += ck1;
 624:	80 91 a9 05 	lds	r24, 0x05A9
 628:	c8 0f       	add	r28, r24
 62a:	c0 93 a9 05 	sts	0x05A9, r28
				state++;
 62e:	60 92 9f 03 	sts	0x039F, r6
				//Serial_write("ENTRO AL CASE 3 \r\n");
				break;
 632:	bb cf       	rjmp	.-138    	; 0x5aa <main+0x90>

				case 4:    // wait for length byte 1
				length = cc;
 634:	8c 2f       	mov	r24, r28
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	90 93 9d 03 	sts	0x039D, r25
 63c:	80 93 9c 03 	sts	0x039C, r24
				ck1 += cc;
 640:	80 91 a8 05 	lds	r24, 0x05A8
 644:	c8 0f       	add	r28, r24
 646:	c0 93 a8 05 	sts	0x05A8, r28
				ck2 += ck1;
 64a:	80 91 a9 05 	lds	r24, 0x05A9
 64e:	c8 0f       	add	r28, r24
 650:	c0 93 a9 05 	sts	0x05A9, r28
				state++;
 654:	50 92 9f 03 	sts	0x039F, r5
				Serial_write("ENTRO AL CASE 4 \r\n");
				TxBCD(length);
				Serial_write("\r\n");

				*/
				break;
 658:	a8 cf       	rjmp	.-176    	; 0x5aa <main+0x90>

				case 5:    // wait for length byte 2
				TxBCD(length);
 65a:	80 91 9c 03 	lds	r24, 0x039C
 65e:	90 91 9d 03 	lds	r25, 0x039D
 662:	3e de       	rcall	.-900    	; 0x2e0 <TxBCD>
				Serial_write("\r\n");
 664:	83 e5       	ldi	r24, 0x53	; 83
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	dd dd       	rcall	.-1094   	; 0x224 <Serial_write>
				TxBCD(cc);
 66a:	cc 2e       	mov	r12, r28
 66c:	d1 2c       	mov	r13, r1
 66e:	c6 01       	movw	r24, r12
 670:	37 de       	rcall	.-914    	; 0x2e0 <TxBCD>
				Serial_write("\r\n");
 672:	83 e5       	ldi	r24, 0x53	; 83
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	d6 dd       	rcall	.-1108   	; 0x224 <Serial_write>
				//length |= (unsigned int) cc << 8;  //probar esto en ambos casos
				length |= ((unsigned int) cc << 8);
 678:	9c 2d       	mov	r25, r12
 67a:	88 27       	eor	r24, r24
 67c:	20 91 9c 03 	lds	r18, 0x039C
 680:	30 91 9d 03 	lds	r19, 0x039D
 684:	82 2b       	or	r24, r18
 686:	93 2b       	or	r25, r19
 688:	90 93 9d 03 	sts	0x039D, r25
 68c:	80 93 9c 03 	sts	0x039C, r24

				TxBCD(length);
 690:	27 de       	rcall	.-946    	; 0x2e0 <TxBCD>
				Serial_write("\r\n");
 692:	83 e5       	ldi	r24, 0x53	; 83
 694:	92 e0       	ldi	r25, 0x02	; 2
 696:	c6 dd       	rcall	.-1140   	; 0x224 <Serial_write>
				ck1 += cc;
 698:	80 91 a8 05 	lds	r24, 0x05A8
 69c:	c8 0f       	add	r28, r24
 69e:	c0 93 a8 05 	sts	0x05A8, r28
				ck2 += ck1;
 6a2:	80 91 a9 05 	lds	r24, 0x05A9
 6a6:	c8 0f       	add	r28, r24
 6a8:	c0 93 a9 05 	sts	0x05A9, r28
				idx = 0;
 6ac:	10 92 a4 03 	sts	0x03A4, r1
 6b0:	10 92 a3 03 	sts	0x03A3, r1
				/*Serial_write("ENTRO AL CASE 5 \r\n");
				TxBCD(length);
				Serial_write("\r\n");
				*/
				state++;
 6b4:	80 91 9f 03 	lds	r24, 0x039F
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 9f 03 	sts	0x039F, r24
				if (length > MAX_LENGTH){
 6be:	80 91 9c 03 	lds	r24, 0x039C
 6c2:	90 91 9d 03 	lds	r25, 0x039D
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	92 40       	sbci	r25, 0x02	; 2
 6ca:	08 f4       	brcc	.+2      	; 0x6ce <main+0x1b4>
 6cc:	6e cf       	rjmp	.-292    	; 0x5aa <main+0x90>
				state= 0;
 6ce:	10 92 9f 03 	sts	0x039F, r1
 6d2:	6b cf       	rjmp	.-298    	; 0x5aa <main+0x90>
				
				break;

				case 6:    // wait for <length> payload bytes
				//Serial_write("ENTRO AL CASE 6 \r\n");
				data[idx++] = cc;
 6d4:	80 91 a3 03 	lds	r24, 0x03A3
 6d8:	90 91 a4 03 	lds	r25, 0x03A4
 6dc:	9c 01       	movw	r18, r24
 6de:	2f 5f       	subi	r18, 0xFF	; 255
 6e0:	3f 4f       	sbci	r19, 0xFF	; 255
 6e2:	30 93 a4 03 	sts	0x03A4, r19
 6e6:	20 93 a3 03 	sts	0x03A3, r18
 6ea:	fc 01       	movw	r30, r24
 6ec:	eb 55       	subi	r30, 0x5B	; 91
 6ee:	fc 4f       	sbci	r31, 0xFC	; 252
 6f0:	c0 83       	st	Z, r28
				ck1 += cc;
 6f2:	80 91 a8 05 	lds	r24, 0x05A8
 6f6:	c8 0f       	add	r28, r24
 6f8:	c0 93 a8 05 	sts	0x05A8, r28
				ck2 += ck1;
 6fc:	80 91 a9 05 	lds	r24, 0x05A9
 700:	c8 0f       	add	r28, r24
 702:	c0 93 a9 05 	sts	0x05A9, r28
				
				if (idx >= length) {
 706:	80 91 9c 03 	lds	r24, 0x039C
 70a:	90 91 9d 03 	lds	r25, 0x039D
 70e:	28 17       	cp	r18, r24
 710:	39 07       	cpc	r19, r25
 712:	08 f4       	brcc	.+2      	; 0x716 <main+0x1fc>
 714:	4a cf       	rjmp	.-364    	; 0x5aa <main+0x90>
					//Serial_write("ENTRO AL CASE 6_IF \r\n");
					state++;
 716:	40 92 9f 03 	sts	0x039F, r4
 71a:	47 cf       	rjmp	.-370    	; 0x5aa <main+0x90>
				}
				break;

				case 7:    // wait for checksum 1
				chk1 = cc;
 71c:	c0 93 a5 05 	sts	0x05A5, r28
				//_delay_ms(100);
				
				//Serial_write("ENTRO AL sCASE 7 \r\n");
				Serial_write("\r\n  chk1: ");
 720:	82 e2       	ldi	r24, 0x22	; 34
 722:	92 e0       	ldi	r25, 0x02	; 2
 724:	7f dd       	rcall	.-1282   	; 0x224 <Serial_write>
				TxBCD(chk1);
 726:	80 91 a5 05 	lds	r24, 0x05A5
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	d9 dd       	rcall	.-1102   	; 0x2e0 <TxBCD>
				Serial_write("\r\n  ck1: ");
 72e:	8d e2       	ldi	r24, 0x2D	; 45
 730:	92 e0       	ldi	r25, 0x02	; 2
 732:	78 dd       	rcall	.-1296   	; 0x224 <Serial_write>
				TxBCD(ck1);
 734:	80 91 a8 05 	lds	r24, 0x05A8
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	d2 dd       	rcall	.-1116   	; 0x2e0 <TxBCD>
				Serial_write("\r\n lenght: ");
 73c:	87 e3       	ldi	r24, 0x37	; 55
 73e:	92 e0       	ldi	r25, 0x02	; 2
 740:	71 dd       	rcall	.-1310   	; 0x224 <Serial_write>
				TxBCD(length);
 742:	80 91 9c 03 	lds	r24, 0x039C
 746:	90 91 9d 03 	lds	r25, 0x039D
 74a:	ca dd       	rcall	.-1132   	; 0x2e0 <TxBCD>
				
				
				state++;
 74c:	80 91 9f 03 	lds	r24, 0x039F
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	80 93 9f 03 	sts	0x039F, r24
							
				break;
 756:	29 cf       	rjmp	.-430    	; 0x5aa <main+0x90>
				case 8:    // wait for checksum 2
				
				chk2 = cc;
 758:	c0 93 9e 03 	sts	0x039E, r28
				
				Serial_write("ENTRO AL CASE 8 \r\n");
 75c:	83 e4       	ldi	r24, 0x43	; 67
 75e:	92 e0       	ldi	r25, 0x02	; 2
 760:	61 dd       	rcall	.-1342   	; 0x224 <Serial_write>
				Serial_write("\r\n  chk1: ");
 762:	82 e2       	ldi	r24, 0x22	; 34
 764:	92 e0       	ldi	r25, 0x02	; 2
 766:	5e dd       	rcall	.-1348   	; 0x224 <Serial_write>
				TxBCD(chk1);
 768:	80 91 a5 05 	lds	r24, 0x05A5
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	b8 dd       	rcall	.-1168   	; 0x2e0 <TxBCD>
				Serial_write("\r\n  ck1: ");
 770:	8d e2       	ldi	r24, 0x2D	; 45
 772:	92 e0       	ldi	r25, 0x02	; 2
 774:	57 dd       	rcall	.-1362   	; 0x224 <Serial_write>
				TxBCD(ck1);
 776:	80 91 a8 05 	lds	r24, 0x05A8
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	b1 dd       	rcall	.-1182   	; 0x2e0 <TxBCD>
				Serial_write("\r\n lenght: ");
 77e:	87 e3       	ldi	r24, 0x37	; 55
 780:	92 e0       	ldi	r25, 0x02	; 2
 782:	50 dd       	rcall	.-1376   	; 0x224 <Serial_write>
				TxBCD(length);
 784:	80 91 9c 03 	lds	r24, 0x039C
 788:	90 91 9d 03 	lds	r25, 0x039D
 78c:	a9 dd       	rcall	.-1198   	; 0x2e0 <TxBCD>
				Serial_write("\r\n ck2: ");
 78e:	86 e5       	ldi	r24, 0x56	; 86
 790:	92 e0       	ldi	r25, 0x02	; 2
 792:	48 dd       	rcall	.-1392   	; 0x224 <Serial_write>
				TxBCD(ck2);
 794:	80 91 a9 05 	lds	r24, 0x05A9
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	a2 dd       	rcall	.-1212   	; 0x2e0 <TxBCD>
				Serial_write("\r\n chk2: ");
 79c:	8f e5       	ldi	r24, 0x5F	; 95
 79e:	92 e0       	ldi	r25, 0x02	; 2
 7a0:	41 dd       	rcall	.-1406   	; 0x224 <Serial_write>
				TxBCD(chk2);
 7a2:	80 91 9e 03 	lds	r24, 0x039E
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	9b dd       	rcall	.-1226   	; 0x2e0 <TxBCD>
				if ((ck1 == chk1)  &&  (ck2 == chk2))
				{	checkOk  = 1;	}

				else {checkOk = 0;}

				checkOk = 1;
 7aa:	b0 92 95 03 	sts	0x0395, r11
 7ae:	a0 92 94 03 	sts	0x0394, r10
				code= 0x02;
 7b2:	d0 93 a7 05 	sts	0x05A7, r29
																
				Serial_write("\r\nCHEOK: ");
 7b6:	89 e6       	ldi	r24, 0x69	; 105
 7b8:	92 e0       	ldi	r25, 0x02	; 2
 7ba:	34 dd       	rcall	.-1432   	; 0x224 <Serial_write>
				TxBCD(checkOk);
 7bc:	80 91 94 03 	lds	r24, 0x0394
 7c0:	90 91 95 03 	lds	r25, 0x0395
 7c4:	8d dd       	rcall	.-1254   	; 0x2e0 <TxBCD>
				Serial_write("\r\nCODE: ");
 7c6:	83 e7       	ldi	r24, 0x73	; 115
 7c8:	92 e0       	ldi	r25, 0x02	; 2
 7ca:	2c dd       	rcall	.-1448   	; 0x224 <Serial_write>
				TxBCD(code);
 7cc:	80 91 a7 05 	lds	r24, 0x05A7
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	86 dd       	rcall	.-1268   	; 0x2e0 <TxBCD>
				Serial_write("\r\n");
 7d4:	83 e5       	ldi	r24, 0x53	; 83
 7d6:	92 e0       	ldi	r25, 0x02	; 2
 7d8:	25 dd       	rcall	.-1462   	; 0x224 <Serial_write>

				if (checkOk == TRUE) {
 7da:	80 91 94 03 	lds	r24, 0x0394
 7de:	90 91 95 03 	lds	r25, 0x0395
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <main+0x2ce>
 7e6:	e8 c0       	rjmp	.+464    	; 0x9b8 <main+0x49e>
				Serial_write("LATITUD: ");
				printLatLon(LONG(8));
				Serial_write("\r\n");

				*/
					switch (code) {		
 7e8:	80 91 a7 05 	lds	r24, 0x05A7
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <main+0x2de>
 7f0:	85 30       	cpi	r24, 0x05	; 5
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <main+0x2dc>
 7f4:	c4 c0       	rjmp	.+392    	; 0x97e <main+0x464>
 7f6:	e0 c0       	rjmp	.+448    	; 0x9b8 <main+0x49e>
												
						case 0x01:      // NAV-
						// Add blank line between time groups
						if (lastTime != ULONG(0)) {
 7f8:	f4 01       	movw	r30, r8
 7fa:	80 81       	ld	r24, Z
 7fc:	91 81       	ldd	r25, Z+1	; 0x01
 7fe:	a2 81       	ldd	r26, Z+2	; 0x02
 800:	b3 81       	ldd	r27, Z+3	; 0x03
 802:	40 91 96 03 	lds	r20, 0x0396
 806:	50 91 97 03 	lds	r21, 0x0397
 80a:	60 91 98 03 	lds	r22, 0x0398
 80e:	70 91 99 03 	lds	r23, 0x0399
 812:	48 17       	cp	r20, r24
 814:	59 07       	cpc	r21, r25
 816:	6a 07       	cpc	r22, r26
 818:	7b 07       	cpc	r23, r27
 81a:	41 f0       	breq	.+16     	; 0x82c <main+0x312>
							lastTime = ULONG(0);
 81c:	80 93 96 03 	sts	0x0396, r24
 820:	90 93 97 03 	sts	0x0397, r25
 824:	a0 93 98 03 	sts	0x0398, r26
 828:	b0 93 99 03 	sts	0x0399, r27
							//Serial_print(F("\nTime: "));
							//Serial_print(ULONG(0)"\n");
												}
						Serial_print("NAV-");
 82c:	8c e7       	ldi	r24, 0x7C	; 124
 82e:	92 e0       	ldi	r25, 0x02	; 2
 830:	13 dd       	rcall	.-1498   	; 0x258 <Serial_print>
						switch (id) {
 832:	90 91 a0 03 	lds	r25, 0x03A0
 836:	49 2f       	mov	r20, r25
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	fa 01       	movw	r30, r20
 83c:	32 97       	sbiw	r30, 0x02	; 2
 83e:	e1 33       	cpi	r30, 0x31	; 49
 840:	f1 05       	cpc	r31, r1
 842:	08 f0       	brcs	.+2      	; 0x846 <main+0x32c>
 844:	96 c0       	rjmp	.+300    	; 0x972 <main+0x458>
 846:	88 27       	eor	r24, r24
 848:	e5 58       	subi	r30, 0x85	; 133
 84a:	ff 4f       	sbci	r31, 0xFF	; 255
 84c:	8f 4f       	sbci	r24, 0xFF	; 255
 84e:	ec c0       	rjmp	.+472    	; 0xa28 <__tablejump2__>
							case 0x02:  // NAV-POSLLH
							//Serial_print(F("POSLLH: lon = "));
							Serial_write("LONGITUD: ");
 850:	81 e8       	ldi	r24, 0x81	; 129
 852:	92 e0       	ldi	r25, 0x02	; 2
 854:	e7 dc       	rcall	.-1586   	; 0x224 <Serial_write>
							printLatLon(LONG(4));
 856:	f4 01       	movw	r30, r8
 858:	64 81       	ldd	r22, Z+4	; 0x04
 85a:	75 81       	ldd	r23, Z+5	; 0x05
 85c:	86 81       	ldd	r24, Z+6	; 0x06
 85e:	97 81       	ldd	r25, Z+7	; 0x07
 860:	83 dd       	rcall	.-1274   	; 0x368 <printLatLon>
							Serial_write("\r\n");
 862:	83 e5       	ldi	r24, 0x53	; 83
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	de dc       	rcall	.-1604   	; 0x224 <Serial_write>
							//Serial_print(F(", lat = "));
							Serial_write("LATITUD: ");
 868:	8c e8       	ldi	r24, 0x8C	; 140
 86a:	92 e0       	ldi	r25, 0x02	; 2
 86c:	db dc       	rcall	.-1610   	; 0x224 <Serial_write>
							printLatLon(LONG(8));
 86e:	f4 01       	movw	r30, r8
 870:	60 85       	ldd	r22, Z+8	; 0x08
 872:	71 85       	ldd	r23, Z+9	; 0x09
 874:	82 85       	ldd	r24, Z+10	; 0x0a
 876:	93 85       	ldd	r25, Z+11	; 0x0b
 878:	77 dd       	rcall	.-1298   	; 0x368 <printLatLon>
							Serial_write("\r\n");
 87a:	83 e5       	ldi	r24, 0x53	; 83
 87c:	92 e0       	ldi	r25, 0x02	; 2
 87e:	d2 dc       	rcall	.-1628   	; 0x224 <Serial_write>
							Serial_print(ULONG(24), DEC);
							Serial_print(F(" mm, hAcc = "));
							Serial_print(ULONG(20), DEC);
							Serial_print(F(" mm"));
							*/
							break;
 880:	7a c0       	rjmp	.+244    	; 0x976 <main+0x45c>
							case 0x03:  // NAV-STATUS
							Serial_write("STATUS: gpsFix = ");
 882:	86 e9       	ldi	r24, 0x96	; 150
 884:	92 e0       	ldi	r25, 0x02	; 2
 886:	ce dc       	rcall	.-1636   	; 0x224 <Serial_write>
							Serial_print(data[4]);
 888:	f4 01       	movw	r30, r8
 88a:	84 81       	ldd	r24, Z+4	; 0x04
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	e4 dc       	rcall	.-1592   	; 0x258 <Serial_print>
							if (data[5] & 2) {
 890:	f4 01       	movw	r30, r8
 892:	85 81       	ldd	r24, Z+5	; 0x05
 894:	81 ff       	sbrs	r24, 1
 896:	6f c0       	rjmp	.+222    	; 0x976 <main+0x45c>
								Serial_write(", dgpsFix");
 898:	88 ea       	ldi	r24, 0xA8	; 168
 89a:	92 e0       	ldi	r25, 0x02	; 2
 89c:	c3 dc       	rcall	.-1658   	; 0x224 <Serial_write>
 89e:	6b c0       	rjmp	.+214    	; 0x976 <main+0x45c>
							
							break;
							
							case 0x04:  // NAV-DOP
							
							Serial_write("DOP:    gDOP = ");
 8a0:	82 eb       	ldi	r24, 0xB2	; 178
 8a2:	92 e0       	ldi	r25, 0x02	; 2
 8a4:	bf dc       	rcall	.-1666   	; 0x224 <Serial_write>
							Serial_print((float) UINT(10) / 100, 2);
							Serial_print(", hDOP = ");
							Serial_print((float) UINT(12) / 100, 2);
							*/
							
							break;
 8a6:	67 c0       	rjmp	.+206    	; 0x976 <main+0x45c>
							Serial_print(data[10], DEC);
							Serial_print(F(", pDOP = "));
							Serial_print((float) UINT(44) / 100.0, 2);
							*/
							//Serial_write(", pAcc = ");
							Serial_write("PRECISION: ");							
 8a8:	82 ec       	ldi	r24, 0xC2	; 194
 8aa:	92 e0       	ldi	r25, 0x02	; 2
 8ac:	bb dc       	rcall	.-1674   	; 0x224 <Serial_write>
							Serial_print(ULONG(24));
 8ae:	f4 01       	movw	r30, r8
 8b0:	80 8d       	ldd	r24, Z+24	; 0x18
 8b2:	91 8d       	ldd	r25, Z+25	; 0x19
 8b4:	d1 dc       	rcall	.-1630   	; 0x258 <Serial_print>
							//Serial_write(" cm")
							/*Serial_print(F(" cm, numSV = "));
							Serial_print(data[47], DEC);
							*/
														
							break;
 8b6:	5f c0       	rjmp	.+190    	; 0x976 <main+0x45c>
							
							case 0x12:  // NAV-VELNED
							
							Serial_print("VELNED: gSpeed = ");
 8b8:	8e ec       	ldi	r24, 0xCE	; 206
 8ba:	92 e0       	ldi	r25, 0x02	; 2
 8bc:	cd dc       	rcall	.-1638   	; 0x258 <Serial_print>
							Serial_print((float) LONG(24) / 100000, 2);
							Serial_print(F(" deg, cAcc = "));
							Serial_print((float) LONG(32) / 100000, 2);
							Serial_print(F(" deg"));
							*/
							break;
 8be:	5b c0       	rjmp	.+182    	; 0x976 <main+0x45c>
							case 0x31:  // NAV-DGPS
							
							Serial_write("DGPS:   age = ");
 8c0:	80 ee       	ldi	r24, 0xE0	; 224
 8c2:	92 e0       	ldi	r25, 0x02	; 2
 8c4:	af dc       	rcall	.-1698   	; 0x224 <Serial_write>
							//Serial_print(LONG(4));
							Serial_write(", baseId = ");
 8c6:	8f ee       	ldi	r24, 0xEF	; 239
 8c8:	92 e0       	ldi	r25, 0x02	; 2
 8ca:	ac dc       	rcall	.-1704   	; 0x224 <Serial_write>
							//Serial_print(INT(8));
							Serial_write(", numCh = ");
 8cc:	8b ef       	ldi	r24, 0xFB	; 251
 8ce:	92 e0       	ldi	r25, 0x02	; 2
 8d0:	a9 dc       	rcall	.-1710   	; 0x224 <Serial_write>
							//Serial_print(INT(12));
							
							break;
 8d2:	51 c0       	rjmp	.+162    	; 0x976 <main+0x45c>
							case 0x32:  // NAV-SBAS
							
							Serial_write("SBAS:   geo = ");
 8d4:	86 e0       	ldi	r24, 0x06	; 6
 8d6:	93 e0       	ldi	r25, 0x03	; 3
 8d8:	a5 dc       	rcall	.-1718   	; 0x224 <Serial_write>
							switch (data[4]) {
 8da:	f4 01       	movw	r30, r8
 8dc:	84 81       	ldd	r24, Z+4	; 0x04
 8de:	87 38       	cpi	r24, 0x87	; 135
 8e0:	41 f0       	breq	.+16     	; 0x8f2 <main+0x3d8>
 8e2:	8a 38       	cpi	r24, 0x8A	; 138
 8e4:	51 f0       	breq	.+20     	; 0x8fa <main+0x3e0>
 8e6:	85 38       	cpi	r24, 0x85	; 133
 8e8:	61 f4       	brne	.+24     	; 0x902 <main+0x3e8>
								
								case 133:
								Serial_write("Inmarsat 4F3");
 8ea:	85 e1       	ldi	r24, 0x15	; 21
 8ec:	93 e0       	ldi	r25, 0x03	; 3
 8ee:	9a dc       	rcall	.-1740   	; 0x224 <Serial_write>
								break;
 8f0:	0a c0       	rjmp	.+20     	; 0x906 <main+0x3ec>
								case 135:
								Serial_write("Galaxy 15");
 8f2:	82 e2       	ldi	r24, 0x22	; 34
 8f4:	93 e0       	ldi	r25, 0x03	; 3
 8f6:	96 dc       	rcall	.-1748   	; 0x224 <Serial_write>
								break;
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <main+0x3ec>
								case 138:
								Serial_write("Anik F1R");
 8fa:	8c e2       	ldi	r24, 0x2C	; 44
 8fc:	93 e0       	ldi	r25, 0x03	; 3
 8fe:	92 dc       	rcall	.-1756   	; 0x224 <Serial_write>
								break;
 900:	02 c0       	rjmp	.+4      	; 0x906 <main+0x3ec>
								default:
								Serial_write(data[4]);
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	8f dc       	rcall	.-1762   	; 0x224 <Serial_write>
								break;
							}
							
							//Serial_print(", mode = ");
							
							switch (data[5]) {
 906:	f4 01       	movw	r30, r8
 908:	85 81       	ldd	r24, Z+5	; 0x05
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	41 f0       	breq	.+16     	; 0x91e <main+0x404>
 90e:	18 f0       	brcs	.+6      	; 0x916 <main+0x3fc>
 910:	82 30       	cpi	r24, 0x02	; 2
 912:	49 f0       	breq	.+18     	; 0x926 <main+0x40c>
 914:	0c c0       	rjmp	.+24     	; 0x92e <main+0x414>
								
								case 0:
								Serial_write("disabled");
 916:	85 e3       	ldi	r24, 0x35	; 53
 918:	93 e0       	ldi	r25, 0x03	; 3
 91a:	84 dc       	rcall	.-1784   	; 0x224 <Serial_write>
								break;
 91c:	0a c0       	rjmp	.+20     	; 0x932 <main+0x418>
								case 1:
								Serial_write("enabled integrity");
 91e:	8e e3       	ldi	r24, 0x3E	; 62
 920:	93 e0       	ldi	r25, 0x03	; 3
 922:	80 dc       	rcall	.-1792   	; 0x224 <Serial_write>
								break;
 924:	06 c0       	rjmp	.+12     	; 0x932 <main+0x418>
								case 2:
								Serial_write("enabled test mode");
 926:	80 e5       	ldi	r24, 0x50	; 80
 928:	93 e0       	ldi	r25, 0x03	; 3
 92a:	7c dc       	rcall	.-1800   	; 0x224 <Serial_write>
								break;
 92c:	02 c0       	rjmp	.+4      	; 0x932 <main+0x418>
								default:
								Serial_write(data[5]);
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	79 dc       	rcall	.-1806   	; 0x224 <Serial_write>
							
							}
							
							Serial_print(", sys = ");
 932:	82 e6       	ldi	r24, 0x62	; 98
 934:	93 e0       	ldi	r25, 0x03	; 3
 936:	90 dc       	rcall	.-1760   	; 0x258 <Serial_print>
							switch (data[6]) {
 938:	f4 01       	movw	r30, r8
 93a:	86 81       	ldd	r24, Z+6	; 0x06
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	51 f0       	breq	.+20     	; 0x954 <main+0x43a>
 940:	28 f0       	brcs	.+10     	; 0x94c <main+0x432>
 942:	82 30       	cpi	r24, 0x02	; 2
 944:	59 f0       	breq	.+22     	; 0x95c <main+0x442>
 946:	80 31       	cpi	r24, 0x10	; 16
 948:	69 f0       	breq	.+26     	; 0x964 <main+0x44a>
 94a:	10 c0       	rjmp	.+32     	; 0x96c <main+0x452>
								case 0:
								Serial_write("WAAS");
 94c:	8b e6       	ldi	r24, 0x6B	; 107
 94e:	93 e0       	ldi	r25, 0x03	; 3
 950:	69 dc       	rcall	.-1838   	; 0x224 <Serial_write>
								break;
 952:	11 c0       	rjmp	.+34     	; 0x976 <main+0x45c>
								case 1:
								Serial_write("EGNOS");
 954:	80 e7       	ldi	r24, 0x70	; 112
 956:	93 e0       	ldi	r25, 0x03	; 3
 958:	65 dc       	rcall	.-1846   	; 0x224 <Serial_write>
								break;
 95a:	0d c0       	rjmp	.+26     	; 0x976 <main+0x45c>
								case 2:
								Serial_write("MSAS");
 95c:	86 e7       	ldi	r24, 0x76	; 118
 95e:	93 e0       	ldi	r25, 0x03	; 3
 960:	61 dc       	rcall	.-1854   	; 0x224 <Serial_write>
								break;
 962:	09 c0       	rjmp	.+18     	; 0x976 <main+0x45c>
								case 16:
								Serial_write("GPS");
 964:	8b e7       	ldi	r24, 0x7B	; 123
 966:	93 e0       	ldi	r25, 0x03	; 3
 968:	5d dc       	rcall	.-1862   	; 0x224 <Serial_write>
								break;
 96a:	05 c0       	rjmp	.+10     	; 0x976 <main+0x45c>
								default:
								Serial_write(data[6]);
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	5a dc       	rcall	.-1868   	; 0x224 <Serial_write>
 970:	02 c0       	rjmp	.+4      	; 0x976 <main+0x45c>
								
							}
							break;
							default:
							printHex(id);
 972:	89 2f       	mov	r24, r25
 974:	37 dd       	rcall	.-1426   	; 0x3e4 <printHex>
						}
						Serial2_print("\n ");
 976:	8f e7       	ldi	r24, 0x7F	; 127
 978:	93 e0       	ldi	r25, 0x03	; 3
 97a:	8c dc       	rcall	.-1768   	; 0x294 <Serial2_print>
						break;
 97c:	1d c0       	rjmp	.+58     	; 0x9b8 <main+0x49e>
						case 0x05:      // ACK-
						Serial_print("ACK-");
 97e:	82 e8       	ldi	r24, 0x82	; 130
 980:	93 e0       	ldi	r25, 0x03	; 3
 982:	6a dc       	rcall	.-1836   	; 0x258 <Serial_print>
						
						switch (id) {
 984:	80 91 a0 03 	lds	r24, 0x03A0
 988:	88 23       	and	r24, r24
 98a:	19 f0       	breq	.+6      	; 0x992 <main+0x478>
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	29 f0       	breq	.+10     	; 0x99a <main+0x480>
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <main+0x486>
							case 0x00:  // ACK-NAK
							Serial_print("NAK: ");
 992:	87 e8       	ldi	r24, 0x87	; 135
 994:	93 e0       	ldi	r25, 0x03	; 3
 996:	60 dc       	rcall	.-1856   	; 0x258 <Serial_print>
							break;
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <main+0x486>
							case 0x01:  // ACK-ACK
							Serial_print("ACK: ");
 99a:	8d e8       	ldi	r24, 0x8D	; 141
 99c:	93 e0       	ldi	r25, 0x03	; 3
 99e:	5c dc       	rcall	.-1864   	; 0x258 <Serial_print>
							break;
						}
						
						printHex(data[0]);
 9a0:	f4 01       	movw	r30, r8
 9a2:	80 81       	ld	r24, Z
 9a4:	1f dd       	rcall	.-1474   	; 0x3e4 <printHex>
						Serial_print(" ");
 9a6:	80 e8       	ldi	r24, 0x80	; 128
 9a8:	93 e0       	ldi	r25, 0x03	; 3
 9aa:	56 dc       	rcall	.-1876   	; 0x258 <Serial_print>
						printHex(data[1]);
 9ac:	f4 01       	movw	r30, r8
 9ae:	81 81       	ldd	r24, Z+1	; 0x01
 9b0:	19 dd       	rcall	.-1486   	; 0x3e4 <printHex>
						Serial_print("\n ");
 9b2:	8f e7       	ldi	r24, 0x7F	; 127
 9b4:	93 e0       	ldi	r25, 0x03	; 3
 9b6:	50 dc       	rcall	.-1888   	; 0x258 <Serial_print>
						break;
					}
				}
				state = 0;
 9b8:	10 92 9f 03 	sts	0x039F, r1
				break;
 9bc:	f6 cd       	rjmp	.-1044   	; 0x5aa <main+0x90>

000009be <__divmodhi4>:
 9be:	97 fb       	bst	r25, 7
 9c0:	07 2e       	mov	r0, r23
 9c2:	16 f4       	brtc	.+4      	; 0x9c8 <__divmodhi4+0xa>
 9c4:	00 94       	com	r0
 9c6:	06 d0       	rcall	.+12     	; 0x9d4 <__divmodhi4_neg1>
 9c8:	77 fd       	sbrc	r23, 7
 9ca:	08 d0       	rcall	.+16     	; 0x9dc <__divmodhi4_neg2>
 9cc:	35 d0       	rcall	.+106    	; 0xa38 <__udivmodhi4>
 9ce:	07 fc       	sbrc	r0, 7
 9d0:	05 d0       	rcall	.+10     	; 0x9dc <__divmodhi4_neg2>
 9d2:	3e f4       	brtc	.+14     	; 0x9e2 <__divmodhi4_exit>

000009d4 <__divmodhi4_neg1>:
 9d4:	90 95       	com	r25
 9d6:	81 95       	neg	r24
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	08 95       	ret

000009dc <__divmodhi4_neg2>:
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255

000009e2 <__divmodhi4_exit>:
 9e2:	08 95       	ret

000009e4 <__udivmodsi4>:
 9e4:	a1 e2       	ldi	r26, 0x21	; 33
 9e6:	1a 2e       	mov	r1, r26
 9e8:	aa 1b       	sub	r26, r26
 9ea:	bb 1b       	sub	r27, r27
 9ec:	fd 01       	movw	r30, r26
 9ee:	0d c0       	rjmp	.+26     	; 0xa0a <__udivmodsi4_ep>

000009f0 <__udivmodsi4_loop>:
 9f0:	aa 1f       	adc	r26, r26
 9f2:	bb 1f       	adc	r27, r27
 9f4:	ee 1f       	adc	r30, r30
 9f6:	ff 1f       	adc	r31, r31
 9f8:	a2 17       	cp	r26, r18
 9fa:	b3 07       	cpc	r27, r19
 9fc:	e4 07       	cpc	r30, r20
 9fe:	f5 07       	cpc	r31, r21
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__udivmodsi4_ep>
 a02:	a2 1b       	sub	r26, r18
 a04:	b3 0b       	sbc	r27, r19
 a06:	e4 0b       	sbc	r30, r20
 a08:	f5 0b       	sbc	r31, r21

00000a0a <__udivmodsi4_ep>:
 a0a:	66 1f       	adc	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	1a 94       	dec	r1
 a14:	69 f7       	brne	.-38     	; 0x9f0 <__udivmodsi4_loop>
 a16:	60 95       	com	r22
 a18:	70 95       	com	r23
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	9b 01       	movw	r18, r22
 a20:	ac 01       	movw	r20, r24
 a22:	bd 01       	movw	r22, r26
 a24:	cf 01       	movw	r24, r30
 a26:	08 95       	ret

00000a28 <__tablejump2__>:
 a28:	ee 0f       	add	r30, r30
 a2a:	ff 1f       	adc	r31, r31
 a2c:	88 1f       	adc	r24, r24
 a2e:	8b bf       	out	0x3b, r24	; 59
 a30:	07 90       	elpm	r0, Z+
 a32:	f6 91       	elpm	r31, Z
 a34:	e0 2d       	mov	r30, r0
 a36:	19 94       	eijmp

00000a38 <__udivmodhi4>:
 a38:	aa 1b       	sub	r26, r26
 a3a:	bb 1b       	sub	r27, r27
 a3c:	51 e1       	ldi	r21, 0x11	; 17
 a3e:	07 c0       	rjmp	.+14     	; 0xa4e <__udivmodhi4_ep>

00000a40 <__udivmodhi4_loop>:
 a40:	aa 1f       	adc	r26, r26
 a42:	bb 1f       	adc	r27, r27
 a44:	a6 17       	cp	r26, r22
 a46:	b7 07       	cpc	r27, r23
 a48:	10 f0       	brcs	.+4      	; 0xa4e <__udivmodhi4_ep>
 a4a:	a6 1b       	sub	r26, r22
 a4c:	b7 0b       	sbc	r27, r23

00000a4e <__udivmodhi4_ep>:
 a4e:	88 1f       	adc	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	5a 95       	dec	r21
 a54:	a9 f7       	brne	.-22     	; 0xa40 <__udivmodhi4_loop>
 a56:	80 95       	com	r24
 a58:	90 95       	com	r25
 a5a:	bc 01       	movw	r22, r24
 a5c:	cd 01       	movw	r24, r26
 a5e:	08 95       	ret

00000a60 <__ltoa_ncheck>:
 a60:	bb 27       	eor	r27, r27
 a62:	2a 30       	cpi	r18, 0x0A	; 10
 a64:	51 f4       	brne	.+20     	; 0xa7a <__ltoa_ncheck+0x1a>
 a66:	99 23       	and	r25, r25
 a68:	42 f4       	brpl	.+16     	; 0xa7a <__ltoa_ncheck+0x1a>
 a6a:	bd e2       	ldi	r27, 0x2D	; 45
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <__ultoa_common>

00000a7c <__ultoa_ncheck>:
 a7c:	bb 27       	eor	r27, r27

00000a7e <__ultoa_common>:
 a7e:	fa 01       	movw	r30, r20
 a80:	a6 2f       	mov	r26, r22
 a82:	62 17       	cp	r22, r18
 a84:	71 05       	cpc	r23, r1
 a86:	81 05       	cpc	r24, r1
 a88:	91 05       	cpc	r25, r1
 a8a:	33 0b       	sbc	r19, r19
 a8c:	30 fb       	bst	r19, 0
 a8e:	66 f0       	brts	.+24     	; 0xaa8 <__ultoa_common+0x2a>
 a90:	aa 27       	eor	r26, r26
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	aa 1f       	adc	r26, r26
 a9c:	a2 17       	cp	r26, r18
 a9e:	10 f0       	brcs	.+4      	; 0xaa4 <__ultoa_common+0x26>
 aa0:	a2 1b       	sub	r26, r18
 aa2:	63 95       	inc	r22
 aa4:	38 50       	subi	r19, 0x08	; 8
 aa6:	a9 f7       	brne	.-22     	; 0xa92 <__ultoa_common+0x14>
 aa8:	a0 5d       	subi	r26, 0xD0	; 208
 aaa:	aa 33       	cpi	r26, 0x3A	; 58
 aac:	08 f0       	brcs	.+2      	; 0xab0 <__ultoa_common+0x32>
 aae:	a9 5d       	subi	r26, 0xD9	; 217
 ab0:	a1 93       	st	Z+, r26
 ab2:	36 f7       	brtc	.-52     	; 0xa80 <__ultoa_common+0x2>
 ab4:	b1 11       	cpse	r27, r1
 ab6:	b1 93       	st	Z+, r27
 ab8:	10 82       	st	Z, r1
 aba:	ca 01       	movw	r24, r20
 abc:	00 c0       	rjmp	.+0      	; 0xabe <strrev>

00000abe <strrev>:
 abe:	dc 01       	movw	r26, r24
 ac0:	fc 01       	movw	r30, r24
 ac2:	67 2f       	mov	r22, r23
 ac4:	71 91       	ld	r23, Z+
 ac6:	77 23       	and	r23, r23
 ac8:	e1 f7       	brne	.-8      	; 0xac2 <strrev+0x4>
 aca:	32 97       	sbiw	r30, 0x02	; 2
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <strrev+0x18>
 ace:	7c 91       	ld	r23, X
 ad0:	6d 93       	st	X+, r22
 ad2:	70 83       	st	Z, r23
 ad4:	62 91       	ld	r22, -Z
 ad6:	ae 17       	cp	r26, r30
 ad8:	bf 07       	cpc	r27, r31
 ada:	c8 f3       	brcs	.-14     	; 0xace <strrev+0x10>
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
